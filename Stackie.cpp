/*
АНТИ-СПОЙЛЕР */
/*
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA*/
/*AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
*/
#include "Stack.h"

#ifdef NDEBUG
#define OUT_ASSERT_OK(stk)
#define IN_ASSERT_OK(stk)
const int ENABLE_IN_ASSERTION = 0;
#else
const int ENABLE_IN_ASSERTION = 1;
#define IN_ASSERT_OK(stk)  { \
                               CalcNCheckHashes(stk); \
                               VerifyStack(stk); \
                               if (stack_errno) { \
                                   fStackDump(stk, stdout); abort(); \
                                   return stack_errno; \
                               } \
                           }
#ifdef CHK_ON_EXIT
#define OUT_ASSERT_OK(stk) { \
                               CalcStkHashCode(stk); \
                               VerifyStack(stk); \
                               if (stack_errno) { \
                                   fStackDump(stk, stdout); \
                                   return stack_errno; \
                               } \
                           }
#else
#define OUT_ASSERT_OK(stk)  CalcStkHashCode(stk);
#endif
#endif

#define PRINTIF(value) stack_errno == value ? #value :

typedef long long canary_t;
typedef unsigned char byte_t;
const byte_t POISON = 0;

const canary_t CANARY = 0x3724648574300169;
const int HASHFACTOR = 0x7A26EE69;
const int NOHASH = -1;

int stack_errno = 0;

struct Stack {
	canary_t  Bobchinsky;
	byte_t*   buffer;
	int       capacity;
	int       count;
	size_t    elemsize;
	int       stk_hashcode;
	int       buf_hashcode;
	canary_t  Dobchinsky;
};

int GetHashCode(void* object, size_t count) {
	int ret = 0;
	byte_t* iter = (byte_t*)object;
	byte_t* end = iter + count;
	for (; iter < end; iter++) {
		ret = HASHFACTOR * ret + *iter;
	}

	return ret;
}
void CalcStkHashCode(Stack* stk) {
	stk->stk_hashcode = 0;
	stk->stk_hashcode = GetHashCode(stk, sizeof(Stack));
}

void CalcNCheckHashes(Stack* stk) {

	int old_hash = stk->stk_hashcode;
	stk->stk_hashcode = 0;
	stk->stk_hashcode = GetHashCode(stk, sizeof(Stack));
	if (old_hash != stk->stk_hashcode) 
		stack_errno = ERR_STK_HASH_DIDNT_MATCH;

	else {
		old_hash = stk->buf_hashcode;
		stk->buf_hashcode = GetHashCode(stk->buffer, stk->count * stk->elemsize);
		if (old_hash != stk->buf_hashcode && old_hash != NOHASH)
			stack_errno = ERR_BUF_HASH_DIDNT_MATCH;
	}

}

void VerifyStack(Stack* stk) {
	if (stk == NULL)
		stack_errno = ERR_STK_NULL_PTR;
	else if (stk->buffer == NULL)
		stack_errno = ERR_BUFFER_NULL_PTR;
	else if (stk->capacity < 0)
		stack_errno = ERR_NEGATIVE_CAPACITY;
	else if (stk->count < 0)
		stack_errno = ERR_NEGATIVE_COUNT;
	else if (stk->count > stk->capacity)
		stack_errno = ERR_COUNT_BIGGER_THAN_CAPACITY;
	else if (stk->Bobchinsky != CANARY)
		stack_errno = ERR_STK_DAMAGED_LEFT;
	else if (stk->Dobchinsky != CANARY)
		stack_errno = ERR_STK_DAMAGED_RIGHT;
	else if (*((canary_t*)((byte_t*)stk->buffer - sizeof(canary_t))) != CANARY)
		stack_errno = ERR_BUFFER_DAMAGED_LEFT;
	else if (*(canary_t*)(stk->buffer + stk->capacity * stk->elemsize) != CANARY)
		stack_errno = ERR_BUFFER_DAMAGED_RIGHT;

}

void fBufferDump(Stack* stk, FILE* stream) {
	byte_t c;
	for (unsigned int i = 0; i < stk->capacity * stk->elemsize; i++) {
		if (!(i & 0b11)) {
			fprintf(stream, "\n[%4d]", i);
		}
		c = stk->buffer[i] / 16;
		if (c < 10) { fputc(c + '0', stream); }
		else { fputc(c - 10 + 'A', stream); }

		c = stk->buffer[i] % 16;
		if (c < 10) { fputc(c + '0', stream); }
		else { fputc(c - 10 + 'A', stream); }

		fputc(' ', stream);
	}

}
void fStackDump(Stack* stk, FILE* stream) {
	if (stream == NULL)
		stream = stdout;
	fprintf(stream, "Stack (%s = %d) ",
		PRINTIF(OK)
		PRINTIF(ERR_STK_NULL_PTR)
		PRINTIF(ERR_BUFFER_NULL_PTR)
		PRINTIF(ERR_NEGATIVE_CAPACITY)
		PRINTIF(ERR_NEGATIVE_COUNT)
		PRINTIF(ERR_COUNT_BIGGER_THAN_CAPACITY)
		PRINTIF(ERR_STK_DAMAGED_LEFT)
		PRINTIF(ERR_STK_DAMAGED_RIGHT)
		PRINTIF(ERR_BUFFER_DAMAGED_LEFT)
		PRINTIF(ERR_BUFFER_DAMAGED_RIGHT)
		PRINTIF(ERR_BUF_HASH_DIDNT_MATCH)
		PRINTIF(ERR_STK_HASH_DIDNT_MATCH)"errcode not valid", stack_errno);
	fprintf(stream, " [0x%p]\n", stk);
	fprintf(stream, "count    == %d\n", stk->count);
	fprintf(stream, "capacity == %d\n", stk->capacity);
	fprintf(stream, "buffer   == [0x%p]\n", stk->buffer);
	/*for (int i = 0; i < stk->capacity; i++) {
		fputc(i < stk->count ? '*' : ' ', stream);
		fprintf(stream, "[%d] = " "0x%X" "\n", i, stk->buffer[i * stk->elemsize]);
	}*/
	fBufferDump(stk, stream);
}

int SettleBuffer(byte_t** buffer, int capacity, size_t elemsize) {
	assert(buffer != NULL);
	while ((*buffer = (byte_t*)malloc(capacity * elemsize + 2 * sizeof(canary_t))) == NULL && capacity > 0) {
		capacity >>= 1;
	}

	if (capacity == 0)
		return ERR_NO_MEMORY_FOR_BUFFER;
	if (!(*buffer))
		return ERR_SKY_FELL_TO_THE_GROUND;
	*((canary_t*)(*buffer)) = CANARY;

	*buffer += sizeof(canary_t);

	for (unsigned int i = 0; i < capacity * elemsize; i++) {
		*(*buffer + i) = POISON;
	}

	*(canary_t*)(*buffer + elemsize * capacity) = CANARY;
	return capacity;
}

int SettleStack(Stack* stk, size_t size) {
	assert(stk != NULL);
	stk->Bobchinsky = CANARY;
	stk->Dobchinsky = CANARY;
	stk->count = 0;
	stk->capacity = DEFAULT_CAPACITY;
	stk->elemsize = size;

	if ((stk->capacity = SettleBuffer(&stk->buffer, stk->capacity, size)) == ERR_NO_MEMORY_FOR_BUFFER) {
		stk->capacity = 0;
		return ERR_NO_MEMORY_FOR_BUFFER;
	}

	if (ENABLE_IN_ASSERTION) {
		stk->buf_hashcode = GetHashCode(stk->buffer, stk->count * stk->elemsize);
		stk->stk_hashcode = GetHashCode(stk, sizeof(Stack));
	}

	else {
		stk->buf_hashcode = NOHASH;
		stk->stk_hashcode = NOHASH;
	}

	OUT_ASSERT_OK(stk)
	return 0;
}

int MakeStack(Stack** stk, size_t size) {
	*stk = (Stack*)malloc(sizeof(Stack));
	if (stk == NULL)
		return ERR_NO_MEMORY_FOR_STACK;
	return SettleStack(*stk, size);
}

int StackReallocUp(Stack* stk) {
	IN_ASSERT_OK(stk)

	byte_t* new_location = NULL;
	int reallocate_coef = 1;
	stk->buffer -= sizeof(canary_t);

	while ((new_location = (byte_t*)realloc(stk->buffer, stk->capacity
		* 2
		* stk->elemsize
		+ 2 * sizeof(canary_t))
		) == NULL
		&& reallocate_coef < (1 << 20))
	{
		reallocate_coef <<= 1;
	}

	if (new_location == NULL) {
		OUT_ASSERT_OK(stk)
		stk->buffer += sizeof(canary_t);
		return ERR_WHILE_REALLOCATE_UP;
	}
	stk->buffer = new_location;
	stk->capacity *= (int)(1.0 / reallocate_coef + 1);
	stk->buffer += sizeof(canary_t);
	for (unsigned int i = stk->count * stk->elemsize; i < stk->capacity * stk->elemsize; i++) {
		*(stk->buffer + i) = POISON;
	}
	*(canary_t*)(stk->buffer + stk->capacity * stk->elemsize) = CANARY;

	OUT_ASSERT_OK(stk)

	return 0;

}

int StackReallocDown(Stack* stk) {

	if (   ((stk->capacity >> 1) + (stk->capacity >> 2)) >> 1 
		   >= stk->count
		&& stk->capacity >= MIN_REALLOC_DOWN_CAPACITY) {

		stk->buffer -= sizeof(canary_t);
		byte_t* new_location = (byte_t*)realloc(stk->buffer, 2 * sizeof(canary_t) + (stk->capacity >>= 1) * stk->elemsize);
		if (new_location == NULL) {
			OUT_ASSERT_OK(stk)
			return ERR_SKY_FELL_TO_THE_GROUND;
		}
		stk->buffer += sizeof(canary_t);
		*(canary_t*)(stk->buffer + stk->capacity * stk->elemsize) = CANARY;
	}

	return 0;

}

int StackPush(Stack* stk, void* value) {
	IN_ASSERT_OK(stk)

	if (stk->capacity == stk->count) {
		if (StackReallocUp(stk) == ERR_WHILE_REALLOCATE_UP) {
			return ERR_WHILE_REALLOCATE_UP;
		}
	}

	byte_t* from = (byte_t*)value;

	if (ENABLE_IN_ASSERTION) {
		for (unsigned int i = 0; i < stk->elemsize; i++) {
			(stk->buffer)[stk->elemsize * stk->count + i] = from[i];
			stk->buf_hashcode = HASHFACTOR * stk->buf_hashcode + from[i];
		}
	}

	else {
		for (unsigned int i = 0; i < stk->elemsize; i++) {
			(stk->buffer)[stk->elemsize * stk->count + i] = from[i];
		}
	}

	stk->count++;

	OUT_ASSERT_OK(stk)
	return 0;
}

int StackPeek(Stack* const stk, void* to_ptr) {
	IN_ASSERT_OK(stk)

	if (stk->count == 0) {
		return ERR_STACK_EMPTY;
	}
	byte_t* to = (byte_t*)to_ptr;
	for (unsigned int i = 0; i < stk->elemsize; i++) {
		to[i] = (stk->buffer)[stk->elemsize * (stk->count - 1) + i];
	}

	return 0;
}
int StackPop(Stack* stk, void* to_ptr) {
	IN_ASSERT_OK(stk)

	if (stk->count == 0) {
		return ERR_STACK_EMPTY;
	}
	byte_t* to = (byte_t*)to_ptr;
	stk->count--;

	for (unsigned int i = 0; i < stk->elemsize; i++) {
		to[i] = (stk->buffer)[stk->elemsize * stk->count + i];
		(stk->buffer)[stk->elemsize * stk->count + i] = POISON;
	}

	if (StackReallocDown(stk) == ERR_SKY_FELL_TO_THE_GROUND)
		return ERR_SKY_FELL_TO_THE_GROUND;

	if (ENABLE_IN_ASSERTION) stk->buf_hashcode = GetHashCode(stk->buffer, stk->elemsize * stk->count);
	OUT_ASSERT_OK(stk)
	return 0;
}

int StackDistruct(Stack** stk) {
	IN_ASSERT_OK(*stk)

	(*stk)->buffer -= sizeof(canary_t);
	free((*stk)->buffer);
	(*stk)->buffer = NULL;
	free(*stk);
	*stk = NULL;
	return 0;
}

int GetStackSize(Stack* const stk) {
	IN_ASSERT_OK(stk)
	return stk->count;
}
